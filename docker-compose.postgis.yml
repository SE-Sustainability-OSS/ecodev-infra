services:
  # BEGIN postgis_db
  postgis_db:
    image: postgis/postgis:16-3.4-alpine
    restart: always
    container_name: postgis_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./postgis_db_data/:/var/lib/postgresql/data/
    env_file:
      - ./.postgis.env
    networks:
      - app-network
  # END postgis_db
  # BEGIN postgis_db_admin
  postgis_db_admin:
    image: dpage/pgadmin4:8.12
    restart: always
    container_name: postgis_db_admin
    labels:
      # Enable Traefik for this specific "pgadmin" service
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.postgis-pgadmin.loadbalancer.server.port=80
      # Make Traefik use this domain in HTTP
      - traefik.http.routers.postgis-pgadmin-http.entrypoints=http
      - traefik.http.routers.postgis-pgadmin-http.rule=Host(`${pgadmin_url}`)
      # Use the traefik-network network (defined in docker.compose.traefik.yml)
      - traefik.docker.network=traefik-network
      # Make Traefik use this domain in HTTPS
      - traefik.http.routers.postgis-pgadmin-https.entrypoints=https
      - traefik.http.routers.postgis-pgadmin-https.rule=Host(`${pgadmin_url}`)
      - traefik.http.routers.postgis-pgadmin-https.tls=true
      # Use the "le" (Let's Encrypt) resolver
      - traefik.http.routers.postgis-pgadmin-https.tls.certresolver=le
      # Plug middleware to redirect HTTP to HTTPS
      - traefik.http.routers.postgis-pgadmin-http.middlewares=https-redirect
      - traefik.http.routers.postgis-pgadmin-https.middlewares=secured
    env_file:
      - ./.postgis.env
    networks:
      - app-network
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-network
  # END postgis_db_admin

networks:
  app-network:
    name: app-network
  traefik-network:
    external: true
